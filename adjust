#!/usr/bin/python
#
# Copyright (c) 2020 WHI LLC
#
# adjust: Adjust clock models for VLBI data correlation.
# (see http://github.com/whi-llc/adjust).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
import os
import sys
import getopt
import re
import numpy as np
import time
import math
import warnings
import io
import pandas as pd

np.seterr(divide='ignore')

if len(sys.argv)==1:
    sys.exit('try '+sys.argv[0]+' -h')

try:
    options, remainder = getopt.getopt(
    sys.argv[1:],
    'afhvx:')

except getopt.GetoptError as err:
    print('ERROR:', err)
    sys.exit(1)

if len(remainder) > 1:
    print('ERROR: only one file argument allowed.')
    sys.exit(1)

adjusted = False
ft_sub_8 = False
exclude = []
#
#start
#peculiar_version='v7_2018/04/08'
#updated Ny with data r4836-r4845
peculiar_version='v8.0_2018/06/24+HhHo'
#
s=u'''
Bd  4   217.277 0.006
Ft  8   0.238   0.015
Hh  1   2.6825  0.000
Ho  1   2.1     0.000
Ht  13  2.943   0.021
Is  9   0.507   0.012
Ke  10  2.006   0.024
Kk  8   0.459   0.012
Ma  6   0.638   0.015
Ny  21  2.308   0.010
On  5   1.866   0.024
Sh  7   9.986   0.013
Wn  6   2.330   0.009
Ww  5   1.974   0.026
Wz  12  2.630   0.000
Yg  13  2.278   0.021
Zc  3   217.047 0.012
'''
for opt,arg in options:
    if opt == '-h':
        print 'Usage: '+sys.argv[0]+' -afhvx: file'
        print '  finds delta to apply to correlator clocks'
        print '     file:'
        print '         one line per station (four fields, blank delimited):'
        print '               station'
        print '               fmout-gps'
        print '               Used'
        print '               rate'
        print '               comment'
        print '     output:'
        print '         one line per station:'
        print '               station'
        print '               offset'
        print '               "x" excluded or " " included'
        print '               station\'s historical noise level'
        print '               number of data point in history'
        print '        one line: peculiar offsets version'
        print '        one summary line:'
        print '               number of stations included'
        print '               total number of stations'
        print '               average offset'
        print '               number included'
        print '               RMS'
        print ' '
        print 'Options:'
        print ' -a   print adjusted peculiar offsets'
        print ' -f   sub 8 us from Ft fmout for 512 Mbps'
        print ' -h   this text'
        print ' -x stations to exclude'
        print '    list of two letter codes, colon separated, case sensitive'
        sys.exit(0)
    elif opt == '-a':
        adjusted = True
    elif opt == '-f':
        ft_sub_8 = True
    elif opt == '-v':
        sys.exit('[Version 8.02]')
    elif opt == '-x':
        exclude=arg.split(':')


df=pd.read_table(io.StringIO(s),sep='\s+',index_col=0,names=['Station','n','offset','rms'])
#
if not remainder:
    print 'enter table'
    indf=pd.read_table(sys.stdin,sep='\s+',index_col=0,names=['Station','gps','used','rate','comments','x1'])
    print 'Input from stdin'
else:
    indf=pd.read_table(remainder[0],sep='\s+',index_col=0,names=['Station','gps','used','rate'])
#    indf=pd.read_table(remainder[0],sep='\s+',index_col=0,names=['Station','gps','used','rate','comments'])
    print 'Input File '+remainder[0] 
#
diff={}
use=np.array([])
list=list(indf.index)
for index in list:
    try:
        gps=float(indf['gps'][index])
        if index == 'Ft' and ft_sub_8:
            indf['gps'][index]=indf['gps'][index]-8
            gps=gps-8
            print ' -8us added to fmout value for Ft'
#
        try:
            used=float(indf['used'][index])
        except:
            print '{:<7}'.format(index)," Can't decode Used"
            continue
    except:
        print '{:<7}'.format(index)," Can't decode fmout"
        continue
    if used == 0:
        print '{:<7}'.format(index)," Used value is zero"
        continue
    if gps == 0:
        print '{:<7}'.format(index)," fmout value is zero"
        continue
    pec=used-gps
    try:
        diff[index]=df['offset'][index]-pec
    except KeyError:
        print '{:<7}'.format(index), "No historical peculiar offset"
        continue
    if index in exclude:
        continue
    else:
        use=np.append(use,diff[index])
avg=np.mean(use)
rms=np.std(use)
if not adjusted:
    print 'Station Peculiar   Diff  X Residual     NR     NRH  Historical     RMS  count'
else:
    print 'Station X Adjusted Input'
#
for index in list:
    try:
        gps=float(indf['gps'][index])
        try:
            used=float(indf['used'][index])
        except:
            continue
    except:
        continue
    if used == 0:
        continue
    if gps == 0:
        continue
    pec=used-gps
# 
    if index in exclude:
        no='x'
    elif adjusted:
        no='i'
    else:
        no=' '
    try:
        df['offset'][index]
    except KeyError:
        if not adjusted:
            continue
        else:
            no='n'
#
    print '{:<7}'.format(index),
    if not adjusted:
        print '{:8.4f}'.format(pec),
        print '{:7.4f}'.format(diff[index]),
    print '{:.1}'.format(no),
    if not adjusted:
        print '{:7.4f}'.format(diff[index]-avg),
        print ' ','{:5.1f}'.format((diff[index]-avg)/rms),
        print ' ','{:5.1f}'.format((diff[index]-avg)/df['rms'][index]),
        print ' ','{:8.4f}'.format(df['offset'][index]),
        print ' ','{:7.4f}'.format(df['rms'][index]),
        print ' ','{:3.0f}'.format(df['n'][index])
    else:
        print '{:8.4f}'.format(pec+avg),
        print '{:<12}'.format(remainder[0])
if not adjusted:
    print 'Diff: amount to add to Used to agree with historical peculiar offsets'
    print 'X: deleted flag, Residual: Diff-Diff_mean, NR=Residual/std, NRH= Diff/RMS'
    print 'Historical peculiar offsets:',peculiar_version
    print '{:d}/{:d}'.format(len(use),len(diff.keys())),
    print '   Diff_mean ','{:7.4f}'.format(avg),
    print '   std ','{:7.4f}'.format(rms)
